(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{253:function(t,v,_){"use strict";_.r(v);var a=_(28),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"js-基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js-基础"}},[t._v("#")]),t._v(" JS 基础")]),t._v(" "),_("h2",{attrs:{id:"主流浏览器内核"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主流浏览器内核"}},[t._v("#")]),t._v(" 主流浏览器内核")]),t._v(" "),_("p",[t._v("浏览器主要由 shell 和内核组成。shell 是浏览器的那些界面，命令，给用户操作的")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("内核")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("IE")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("trident")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Chrome")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("blink")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Firefox")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("Gecko")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Safari")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("webkit")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("Opera")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("presto")])])])]),t._v(" "),_("h2",{attrs:{id:"javascript-组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript-组成"}},[t._v("#")]),t._v(" JavaScript 组成")]),t._v(" "),_("ul",[_("li",[t._v("核心（ECMAScript）")]),t._v(" "),_("li",[t._v("文档对象模型（DOM）---\x3e是针对 XML 但经过扩展用于 HTML 的 API")]),t._v(" "),_("li",[t._v("浏览器对象模型（BOM）")])]),t._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[t._v("&")]),t._v(" "),_("p",[t._v("如果页面中 "),_("code",[t._v("script")]),t._v(" 标签中既引入了外部的 js 文件，又嵌入了 js 代码，则嵌入的代码会被忽略")])]),t._v(" "),_("h2",{attrs:{id:"javascript-执行步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javascript-执行步骤"}},[t._v("#")]),t._v(" JavaScript 执行步骤")]),t._v(" "),_("ol",[_("li",[t._v("语法分析")]),t._v(" "),_("li",[t._v("预编译")]),t._v(" "),_("li",[t._v("解释执行")])]),t._v(" "),_("h2",{attrs:{id:"变量类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[t._v("#")]),t._v(" 变量类型")]),t._v(" "),_("ol",[_("li",[t._v("基本类型值（存放在"),_("strong",[t._v("栈")]),t._v("里）\n"),_("ul",[_("li",[t._v("Number\n"),_("ul",[_("li",[t._v("浮点数值，保存浮点数值的内存空间是保存整数值的两倍，如 1.0 这样的浮点数会被转换成整数 1")]),t._v(" "),_("li",[t._v("NaN（非数值），"),_("strong",[t._v("与任何值都不相等")]),t._v(" "),_("ul",[_("li",[t._v("判断一个变量是否是 NaN 时，不能用 "),_("code",[t._v("x == NaN")]),t._v(" ，而应当用 "),_("code",[t._v("x != x")]),t._v(" 来判断，只有当 "),_("code",[t._v("x = NaN")]),t._v(" 时才会返回 "),_("code",[t._v("true")]),t._v(" ，函数 "),_("code",[t._v("isNaN()")]),t._v(" 与此类似")])])]),t._v(" "),_("li",[t._v("数值转换：\n"),_("ul",[_("li",[_("code",[t._v("Number()")]),t._v(" 用于任何类型")]),t._v(" "),_("li",[_("code",[t._v("parseInt()")]),t._v(" 把字符串转换成整数类型，遇到第一个不是数字的字符串停止")]),t._v(" "),_("li",[_("code",[t._v("parseFloat()")]),t._v(" 把字符串转换成浮点数数类型，遇到第一个不是数字的字符串停止")])])]),t._v(" "),_("li",[t._v("任何类型的数据与 Number 类型进行数学运算时，都会被转换成数字，不能转换成数字的就是 "),_("code",[t._v("NaN")])])])]),t._v(" "),_("li",[t._v("String\n"),_("ul",[_("li",[t._v("字符串一旦被创建他们的值就不能被改变，如果要改变就必须销毁原来的字符串，再用一个新的来填充该变量")])])]),t._v(" "),_("li",[t._v("Boolean")]),t._v(" "),_("li",[t._v("undefined\n"),_("ul",[_("li",[t._v("已声明但未被初始化的变量值为 undefined")])])]),t._v(" "),_("li",[t._v("null\n"),_("ul",[_("li",[t._v("null == undefined 结果为 true")])])])])]),t._v(" "),_("li",[t._v("引用类型值（存放在"),_("strong",[t._v("堆")]),t._v("里）\n"),_("ul",[_("li",[t._v("array")]),t._v(" "),_("li",[t._v("object")]),t._v(" "),_("li",[t._v("function")]),t._v(" "),_("li",[t._v("...")])])])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("&")]),t._v(" "),_("p",[t._v("基本类型值在栈里面存放数据，变量之间的赋值是通过"),_("strong",[t._v("拷贝副本")]),t._v("，此后两个变量可以参加任何操作而不会相互影响；引用类型值存放在堆里，包含引用类型值的变量实际上包含的是指向该对象的"),_("strong",[t._v("指针")]),t._v("。")])]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("p",[t._v("typeof 操作符：检测变量的数据类型")]),t._v(" "),_("ul",[_("li",[t._v("返回的值有六种（全是"),_("strong",[t._v("字符串类型")]),t._v("）\n"),_("ul",[_("li",[t._v("'number'")]),t._v(" "),_("li",[t._v("'string'")]),t._v(" "),_("li",[t._v("'boolean'")]),t._v(" "),_("li",[t._v("'object'")]),t._v(" "),_("li",[t._v("'undefined'")]),t._v(" "),_("li",[t._v("'function'")])])]),t._v(" "),_("li",[_("code",[t._v("typeof(123)")]),t._v(" => "),_("code",[t._v("'number'")])]),t._v(" "),_("li",[_("code",[t._v("typeof(typeof(123))")]),t._v(" => "),_("code",[t._v("'string'")])]),t._v(" "),_("li",[t._v("如果 typeof 返回了 "),_("code",[t._v("undefined")]),t._v(" 则有可能是以下三种情况\n"),_("ul",[_("li",[_("code",[t._v("var a = undefined")])]),t._v(" "),_("li",[_("code",[t._v("var b")])]),t._v(" "),_("li",[t._v("未定义")])])])])]),t._v(" "),_("li",[_("p",[t._v("instanceof 操作符：检测变量属于哪一种引用类型")])])]),t._v(" "),_("ul",[_("li",[t._v("左操作数是一个对象，右操作数是标识对象的类")]),t._v(" "),_("li",[t._v("如果左侧的对象是右侧类的实例，则返回 "),_("code",[t._v("true")]),t._v("，否则返回 "),_("code",[t._v("false")])]),t._v(" "),_("li",[t._v("工作原理：\n"),_("ul",[_("li",[t._v("为了计算 "),_("code",[t._v("o instanceof f")])]),t._v(" "),_("li",[t._v("首先计算 "),_("code",[t._v("f.prototype")])]),t._v(" "),_("li",[t._v("然后在原型链中查找 "),_("code",[t._v("o")])]),t._v(" "),_("li",[t._v("如果找到，那么 "),_("code",[t._v("o")]),t._v(" 就是 "),_("code",[t._v("f")]),t._v("（或者 "),_("code",[t._v("f")]),t._v(" 的父类）的一个实例，返回 "),_("code",[t._v("true")])]),t._v(" "),_("li",[t._v("如果 "),_("code",[t._v("f.prototype")]),t._v(" 不在 "),_("code",[t._v("o")]),t._v(" 的原型链中，则 "),_("code",[t._v("o")]),t._v(" 和 "),_("code",[t._v("f")]),t._v(" 就没有派生关系，返回 "),_("code",[t._v("false")])])])]),t._v(" "),_("li",[t._v("使用 instanceof 操作符的问题在于：\n"),_("ul",[_("li",[t._v("单一的全局环境")]),t._v(" "),_("li",[t._v("如果网页中有多个框架，那么就有多个全局环境，就存在多个环境下的构造 函数")])])])]),t._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[t._v("关于 "),_("code",[t._v("&&")]),t._v(" 操作符：")])]),t._v(" "),_("ul",[_("li",[t._v("大多数情况下都是对表达式进行布尔计算")]),t._v(" "),_("li",[t._v("另一种情况：运算符首先计算左侧的值\n"),_("ul",[_("li",[t._v("如果为 "),_("code",[t._v("false")]),t._v("，那么整个表达式也是 "),_("code",[t._v("false")]),t._v("，就不会对右侧的表达式进行计算，这时就返回左侧表达式的值")]),t._v(" "),_("li",[t._v("如果为 "),_("code",[t._v("true")]),t._v("，那么整个表达式就会返回右侧表达式的结果")]),t._v(" "),_("li",[_("code",[t._v("var p = null")])]),t._v(" "),_("li",[_("code",[t._v("p && p.x // 返回null")])])])])]),t._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[_("p",[t._v("i++ 和 ++i")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("i++ 是先执行表达式语句再运算")])]),t._v(" "),_("li",[_("p",[t._v("++i 是先运算再执行表达式语句")])]),t._v(" "),_("li",[_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\na "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nb "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])])])]),t._v(" "),_("li",[_("p",[t._v("分析：执行第二行语句时，i = 1，所以 a = 2，执行完这个语句，i + 1，所以 i = 2；执行第三行语句时，先把 i + 1，此时 i = 3，最后结果 b = 4")])])])])]),t._v(" "),_("h3",{attrs:{id:"相等与全等"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相等与全等"}},[t._v("#")]),t._v(" 相等与全等")]),t._v(" "),_("ol",[_("li",[t._v("使用 "),_("code",[t._v("==")]),t._v("，不同类型的值也可以被看作相等（可以允许类型转换）")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("类型（x）")]),t._v(" "),_("th",[t._v("类型（y）")]),t._v(" "),_("th",[t._v("结果")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("null")]),t._v(" "),_("td",[t._v("undefined")]),t._v(" "),_("td",[t._v("true")])]),t._v(" "),_("tr",[_("td",[t._v("数字")]),t._v(" "),_("td",[t._v("字符串")]),t._v(" "),_("td",[t._v("x == toNumber(y)")])]),t._v(" "),_("tr",[_("td",[t._v("布尔值")]),t._v(" "),_("td",[t._v("任何类型")]),t._v(" "),_("td",[t._v("toNumber(x) == y")])]),t._v(" "),_("tr",[_("td",[t._v("字符串或数字")]),t._v(" "),_("td",[t._v("对象")]),t._v(" "),_("td",[t._v("x == toPrimitive(y)")])])])]),t._v(" "),_("p",[_("code",[t._v("toNumber()")]),t._v(" 对不同类型返回的结果如下：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("值类型")]),t._v(" "),_("th",[t._v("结果")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("undefined")]),t._v(" "),_("td",[t._v("NaN")])]),t._v(" "),_("tr",[_("td",[t._v("null")]),t._v(" "),_("td",[t._v("0")])]),t._v(" "),_("tr",[_("td",[t._v("布尔值")]),t._v(" "),_("td",[t._v("true = 1，false = 0")])]),t._v(" "),_("tr",[_("td",[t._v("字符串")]),t._v(" "),_("td",[t._v("如果字符串包含字母，返回 NaN，如果是数字组成，返回数字")])]),t._v(" "),_("tr",[_("td",[t._v("对象")]),t._v(" "),_("td",[t._v("Number(toPrimitive(obj))")])])])]),t._v(" "),_("p",[_("code",[t._v("toPrimitive()")]),t._v(" 转换对象时：")]),t._v(" "),_("p",[t._v("如果对象的 "),_("code",[t._v("valueOf")]),t._v(" 方法的结果是原始值，返回原始值；如果对象的 "),_("code",[t._v("toString")]),t._v(" 方法返回原始值，就返回这个值；其他情况都是错误")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("使用 "),_("code",[t._v("===")]),t._v(" 操作符")])]),t._v(" "),_("p",[t._v("如果比较的"),_("strong",[t._v("两个值类型不同")]),t._v("，比较的结果就是 false；如果值类型相同，就要比较两个值是否一致（"),_("strong",[t._v("引用的同一个对象")]),t._v("）")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("&")]),t._v(" "),_("p",[t._v("所有的大写 ASCII 字母都小于小写的 ASCII 字母")])]),t._v(" "),_("h2",{attrs:{id:"类型转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),_("p",[t._v("布尔值的转换")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("数值类型")]),t._v(" "),_("th",[t._v("转换成布尔值")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("undefined")]),t._v(" "),_("td",[t._v("false")])]),t._v(" "),_("tr",[_("td",[t._v("null")]),t._v(" "),_("td",[t._v("false")])]),t._v(" "),_("tr",[_("td",[t._v("布尔值")]),t._v(" "),_("td",[t._v("true/false")])]),t._v(" "),_("tr",[_("td",[t._v("数字")]),t._v(" "),_("td",[t._v("+0、-0 和 NaN 是 false，其他是 true")])]),t._v(" "),_("tr",[_("td",[t._v("字符串")]),t._v(" "),_("td",[t._v("空字符串是 false，其他是 true")])]),t._v(" "),_("tr",[_("td",[t._v("对象")]),t._v(" "),_("td",[t._v("true")])])])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("&")]),t._v(" "),_("p",[t._v("JavaScript 中的任何值都可以转换成布尔值，其中只有六个转换为 false")])]),t._v(" "),_("h3",{attrs:{id:"隐式类型转换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[t._v("#")]),t._v(" 隐式类型转换")]),t._v(" "),_("p",[t._v("隐式类型转换在内部调用的是显示类型转换")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("isNaN(n)")]),t._v(" => "),_("code",[t._v("Number(n)")])]),t._v(" "),_("li",[_("code",[t._v("++/--")]),t._v(" => "),_("code",[t._v("Number()")])]),t._v(" "),_("li",[t._v("如果 "),_("code",[t._v("+")]),t._v(" 运算符的一个操作数是字符串，它会把另一个操作数转换为字符串=> "),_("code",[t._v("String()")])]),t._v(" "),_("li",[t._v("四则运算=> "),_("code",[t._v("Number()")])]),t._v(" "),_("li",[_("code",[t._v("undifined == null")])])]),t._v(" "),_("h3",{attrs:{id:"对象转布尔值"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象转布尔值"}},[t._v("#")]),t._v(" 对象转布尔值")]),t._v(" "),_("p",[t._v("所有的对象（包括数组和函数）都将转换为 true，对于包装类型也一样："),_("code",[t._v("new Boolean(false)")]),t._v(" 也将转换为 true")]),t._v(" "),_("h3",{attrs:{id:"对象转字符串和数字"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象转字符串和数字"}},[t._v("#")]),t._v(" 对象转字符串和数字")]),t._v(" "),_("p",[t._v("所有的对象都继承了 "),_("code",[t._v("toString()")]),t._v(" 和 "),_("code",[t._v("valueOf()")]),t._v(" 方法")]),t._v(" "),_("ol",[_("li",[t._v("toString()\n"),_("ul",[_("li",[t._v("作用是返回一个"),_("strong",[t._v("反映这个对象")]),t._v("的字符串")]),t._v(" "),_("li",[_("code",[t._v("({x:1}).toString()")]),t._v(" => "),_("code",[t._v("[object Object]")])]),t._v(" "),_("li",[_("code",[t._v("[1, 2, 3].toString()")]),t._v(" => "),_("code",[t._v("1, 2, 3")])]),t._v(" "),_("li",[_("code",[t._v("(function() {}).toString")]),t._v(" => "),_("code",[t._v("function() {}")])]),t._v(" "),_("li",[t._v("...")]),t._v(" "),_("li",[_("code",[t._v("null")]),t._v(" 和 "),_("code",[t._v("undifined")]),t._v(" 没有 "),_("code",[t._v("toString()")]),t._v(" 方法")])])]),t._v(" "),_("li",[t._v("valueOf()\n"),_("ul",[_("li",[t._v("简单的返回对象本身")]),t._v(" "),_("li",[t._v("日期对象会返回 1970/1/1 以来的毫秒数")])])])]),t._v(" "),_("p",[t._v("JavaScript "),_("strong",[t._v("对象到基本类型的转换")]),t._v("经历了以下过程：")]),t._v(" "),_("ul",[_("li",[t._v("对象首先会调用 "),_("code",[t._v("valueOf()")]),t._v(" 方法，一般对象的 "),_("code",[t._v("valueOf()")]),t._v(" 方法都会返回这个对象的本身，如果返回的是一个原始值，那么直接将这个结果返回")]),t._v(" "),_("li",[t._v("如果返回的不是一个原始值，对象就会去调用 "),_("code",[t._v("toString()")]),t._v(" 方法，如果返回的是一个我原始值，就将这个结果返回")]),t._v(" "),_("li",[t._v("否则就会抛出异常")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("&")]),t._v(" "),_("p",[t._v("对于 "),_("code",[t._v("+")]),t._v(" 和 "),_("code",[t._v("==")]),t._v(" 运算符，如果其中一个操作数是对象，JavaScript 就会将对象转换为原始值")])]),t._v(" "),_("h2",{attrs:{id:"date"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[t._v("#")]),t._v(" Date")]),t._v(" "),_("p",[_("strong",[t._v("var date = new Date();")])]),t._v(" "),_("ul",[_("li",[t._v("getFullYear方法：得到年份")]),t._v(" "),_("li",[t._v("getMonth方法：得到月份，从0开始计算")]),t._v(" "),_("li",[t._v("getDate方法：得到日期部分")]),t._v(" "),_("li",[t._v("getDay方法：得到星期几，0表示星期天")]),t._v(" "),_("li",[t._v("getHours方法：得到小时部分")]),t._v(" "),_("li",[t._v("getMinutes方法：得到分钟部分")]),t._v(" "),_("li",[t._v("getSeconds方法：得到秒部分")]),t._v(" "),_("li",[t._v("getMilliseconds方法：得到毫秒部分")]),t._v(" "),_("li",[t._v("getTime方法：得到时间戳")])]),t._v(" "),_("h2",{attrs:{id:"垃圾回收机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),_("h3",{attrs:{id:"标记清除（最常用）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记清除（最常用）"}},[t._v("#")]),t._v(" 标记清除（最常用）")]),t._v(" "),_("p",[t._v("垃圾回收器在运行时给"),_("strong",[t._v("所有在内存中的变量都加上标记")]),t._v("，然后它会去掉"),_("strong",[t._v("环境中的变量")]),t._v("和"),_("strong",[t._v("被环境中的变量引用的变量")]),t._v("的标记，而在此之后加上标记的被视为"),_("strong",[t._v("准备删除的变量")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"引用计数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用计数"}},[t._v("#")]),t._v(" 引用计数")]),t._v(" "),_("p",[t._v("当声明了一个变量并将引用类型值赋给这个变量，则这个值的"),_("strong",[t._v("引用次数为1")]),t._v("；如果这个值又被赋给另一个变量，则"),_("strong",[t._v("引用次数+1")]),t._v("；如果引用这个值的变量又取得了另一个值，则"),_("strong",[t._v("引用次数-1")]),t._v("，直到"),_("strong",[t._v("引用次数为0，就会被回收")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"基本包装类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型"}},[t._v("#")]),t._v(" 基本包装类型")]),t._v(" "),_("p",[t._v("JS 为了增强原始类型的功能，为 boolean、string、number 分别创建了一个构造函数：")]),t._v(" "),_("ol",[_("li",[t._v("Boolean")]),t._v(" "),_("li",[t._v("String")]),t._v(" "),_("li",[t._v("Number")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("&")]),t._v(" "),_("p",[t._v("每当读取一个原始类型的时候，后台会通过构造函数创建一个与之"),_("strong",[t._v("对应的原始类型对象")]),t._v("，通过这个对象来访问原始类型的属性和方法")])]),t._v(" "),_("p",[t._v("引用类型与基本包装类型的"),_("strong",[t._v("主要区别就是对象的生存期")]),t._v("：")]),t._v(" "),_("p",[t._v("使用new操作符创建的引用类型的实例，"),_("strong",[t._v("在执行流离开当前作用域之前一直保存在内存中")]),t._v("。而自动创建的基本包装类型的对象，只存在于一行代码的"),_("strong",[t._v("执行瞬间")]),t._v("，然后立即被销毁。就意味着"),_("strong",[t._v("不能给基本包装类型的对象添加属性和方法")])]),t._v(" "),_("p",[t._v("使用new调用的构造函数和直接调用同名的转型函数是不一样的：")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"23"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj\t\t\t"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转型函数")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" nunber\t\t"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\t\t"),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),t._v("\n")])])]),_("h2",{attrs:{id:"单体内置对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单体内置对象"}},[t._v("#")]),t._v(" 单体内置对象")]),t._v(" "),_("p",[t._v("内置对象：不依赖宿主环境，在程序执行之前就已经存在了")]),t._v(" "),_("ol",[_("li",[t._v("Global 对象：不属于任何对象的属性和方法最终都是 Global 的\n"),_("ul",[_("li",[t._v("URI 编码\n"),_("ul",[_("li",[t._v("encodeURI()：使用它编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了 %20")]),t._v(" "),_("li",[t._v("encodeComponentURI()：替换所有非字母数字的字符")]),t._v(" "),_("li",[t._v("一般对整个 URI 使用 encodeURI，对附加在 URI 后面的字符串使用 encodeComponentURI")]),t._v(" "),_("li",[t._v("decodeURI 和 decodeComponentURI 能够对上面两种编码之后的解码")])])]),t._v(" "),_("li",[t._v("eval()\n"),_("ul",[_("li",[t._v("在 "),_("code",[t._v("eval()")]),t._v(" 中定义的代码对当作实际的 ECMAScript 代码来解析，然后把执行结果插入到原来的位置，被执行的代码具有与该执行环境相同的作用域链。")]),t._v(" "),_("li",[t._v("在 "),_("code",[t._v("eval()")]),t._v(" 中创建的任何变量或函数都不会被提升，只有在执行的时候才创建")])])])])]),t._v(" "),_("li",[t._v("Math 对象：\n"),_("ul",[_("li",[t._v("random()\n"),_("ul",[_("li",[t._v("在给定范围内取值：（min，max）max 一般取不到")]),t._v(" "),_("li",[t._v("value = Math.random() * (max - min) + min")])])])])])]),t._v(" "),_("h2",{attrs:{id:"错误处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),_("h3",{attrs:{id:"抛出错误"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抛出错误"}},[t._v("#")]),t._v(" 抛出错误")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" 错误对象"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("h3",{attrs:{id:"捕获错误"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#捕获错误"}},[t._v("#")]),t._v(" 捕获错误")]),t._v(" "),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码块1")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("错误对象"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码块2")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码块3")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);v.default=e.exports}}]);